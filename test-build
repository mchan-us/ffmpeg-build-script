#!/bin/bash

# HOMEPAGE: https://github.com/mchan-us/ffmpeg-build-script
# LICENSE: https://github.com/mchan-us/ffmpeg-build-script/blob/master/LICENSE

PROGNAME=$(basename "$0")
VERSION=1.29
CWD=$(pwd)
PACKAGES="$CWD/packages"
WORKSPACE="$CWD/workspace"
CFLAGS="-I$WORKSPACE/include"
LDFLAGS="-L$WORKSPACE/lib"
LDEXEFLAGS=""
EXTRALIBS="-ldl -lpthread -lm -lz"
MACOS_M1=false
CONFIGURE_OPTIONS=()
NONFREE_AND_GPL=true

# Check for Apple Silicon
if [[ ("$(uname -m)" == "arm64") && ("$OSTYPE" == "darwin"*) ]]; then
  # If arm64 AND darwin (macOS)
  export ARCH=arm64
  export MACOSX_DEPLOYMENT_TARGET=11.0
  MACOS_M1=true
fi

# Speed up the process
# Env Var NUMJOBS overrides automatic detection
if [[ -n "$NUMJOBS" ]]; then
  MJOBS="$NUMJOBS"
elif [[ -f /proc/cpuinfo ]]; then
  MJOBS=$(grep -c processor /proc/cpuinfo)
elif [[ "$OSTYPE" == "darwin"* ]]; then
  MJOBS=$(sysctl -n machdep.cpu.thread_count)
  CONFIGURE_OPTIONS=("--enable-videotoolbox")
else
  MJOBS=4
fi

download() {
  # download url [filename[dirname]]
  
  DOWNLOAD_FILE="${2:-"${1##*/}"}"

  echo "Downloading $1 as $DOWNLOAD_FILE"

  echo "... Done"

  echo "Extracted $DOWNLOAD_FILE"

}

execute() {
  echo "$ $*"
}

build() {
  echo ""
  echo "building $1"
  echo "======================="

  return 0
}

command_exists() {
  if ! [[ -x $(command -v "$1") ]]; then
    return 1
  fi

  return 0
}

library_exists() {
  if ! [[ -x $(pkg-config --exists --print-errors "$1" 2>&1 >/dev/null) ]]; then
    return 1
  fi

  return 0
}

lib_exists() {
  STORM="/lib/x86_64-linux-gnu/${1}"
  if ! [ -e $STORM ]; then
    return 1
  fi

  return 0
}

build_done() {
  echo "Done!"
}

cleanup() {
  echo "Cleanup done."
  echo ""
}

usage() {
  echo "Usage: $PROGNAME [OPTIONS]"
  echo "Options:"
  echo "  -h, --help                      Display usage information"
  echo "      --version                   Display version information"
  echo "  -b, --build                     Starts the build process"
  echo "      --disable-gpl-and-non-free  Disable GPL and non-free codecs - https://ffmpeg.org/legal.html"
  echo "  -c, --cleanup                   Remove all working dirs"
  echo "      --full-static               Build a full static FFmpeg binary (eg. glibc, pthreads etc...) **only Linux**"
  echo "                                  Note: Because of the NSS (Name Service Switch), glibc does not recommend static links."
  echo ""
}

echo "ffmpeg-build-script tester v$VERSION"
echo ""
echo "BE CAREFUL!" 
echo "THIS SCRIPT IS FOR TESTING PURPOSES ONLY!"
echo "THIS SCRIPT DOES NOT MAKE ANY CHANGES!"
echo "========================================="
echo ""

while (($# > 0)); do
  case $1 in
  -h | --help)
    usage
    exit 0
    ;;
  --version)
    echo "$VERSION"
    exit 0
    ;;
  -*)
    if [[ "$1" == "--build" || "$1" =~ '-b' ]]; then
      bflag='-b'
    fi
    if [[ "$1" == "--disable-gpl-and-non-free" ]]; then
      NONFREE_AND_GPL=false
    else
      CONFIGURE_OPTIONS+=("--enable-nonfree")
      CONFIGURE_OPTIONS+=("--enable-gpl")
      NONFREE_AND_GPL=true
    fi
    if [[ "$1" == "--cleanup" || "$1" =~ '-c' && ! "$1" =~ '--' ]]; then
      cflag='-c'
      cleanup
    fi
    if [[ "$1" == "--full-static" ]]; then
      if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "Error: A full static binary can only be build on Linux."
        exit 1
      fi
      LDEXEFLAGS="-static"
    fi
    shift
    ;;
  *)
    usage
    exit 1
    ;;
  esac
done

if [ -z "$bflag" ]; then
  if [ -z "$cflag" ]; then
    usage
    exit 1
  fi
  exit 0
fi

echo "Using $MJOBS make jobs simultaneously."

if $NONFREE_AND_GPL; then
echo "With GPL and non-free codecs"
fi

if [ -n "$LDEXEFLAGS" ]; then
  echo "Start the build in full static mode."
fi

export PATH="${WORKSPACE}/bin:$PATH"
PKG_CONFIG_PATH="/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig"
PKG_CONFIG_PATH+=":/usr/local/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib64/pkgconfig"
export PKG_CONFIG_PATH

if ! command_exists "make"; then
  echo "make not installed."
  exit 1
fi

if ! command_exists "g++"; then
  echo "g++ not installed."
  exit 1
fi

if ! command_exists "curl"; then
  echo "curl not installed."
  exit 1
fi

if ! command_exists "python"; then
  echo "Python 2 not found. Lv2 filter will not be available."
fi

if ! command_exists "python3"; then
  echo "Python 3 not found. libdav1d, the High Speed AV1 Decoder, will not be available without Python 3."
fi

##
## build tools
##

if build "pkg-config"; then
  download "https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz"
  execute ./configure --silent --prefix="${WORKSPACE}" --with-pc-path="${WORKSPACE}"/lib/pkgconfig --with-internal-glib
  execute make -j $MJOBS
  execute make install
  build_done "pkg-config"
fi

if command_exists "python"; then

  if build "lv2"; then
    download "https://lv2plug.in/spec/lv2-1.18.2.tar.bz2" "lv2-1.18.2.tar.bz2"
    execute ./waf configure --prefix="${WORKSPACE}" --lv2-user
    execute ./waf
    execute ./waf install

    build_done "lv2"
  fi

  if build "waflib"; then
    download "https://gitlab.com/drobilla/autowaf/-/archive/b600c928b221a001faeab7bd92786d0b25714bc8/autowaf-b600c928b221a001faeab7bd92786d0b25714bc8.tar.gz" "autowaf.tar.gz"
    build_done "waflib"
  fi

  if build "serd"; then
    download "https://gitlab.com/drobilla/serd/-/archive/v0.30.10/serd-v0.30.10.tar.gz" "serd-v0.30.10.tar.gz"
    execute cp -r "${PACKAGES}"/autowaf/* "${PACKAGES}/serd-v0.30.10/waflib/"
    execute ./waf configure --prefix="${WORKSPACE}" --static --no-shared --no-posix
    execute ./waf
    execute ./waf install
    build_done "serd"
  fi

  if build "pcre"; then
    download "https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz" "pcre-8.44.tar.gz"
    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j $MJOBS
    execute make install

    build_done "pcre"
  fi

  if build "sord"; then
    download "https://gitlab.com/drobilla/sord/-/archive/v0.16.8/sord-v0.16.8.tar.gz" "sord-v0.16.8.tar.gz"
    execute cp -r "${PACKAGES}"/autowaf/* "${PACKAGES}/sord-v0.16.8/waflib/"
    execute ./waf configure --prefix="${WORKSPACE}" CFLAGS="${CFLAGS}" --static --no-shared --no-utils
    execute ./waf CFLAGS="${CFLAGS}"
    execute ./waf install

    build_done "sord"
  fi

  if build "sratom"; then
    download "https://gitlab.com/lv2/sratom/-/archive/v0.6.8/sratom-v0.6.8.tar.gz" "sratom-v0.6.8.tar.gz"
    execute cp -r "${PACKAGES}"/autowaf/* "${PACKAGES}/sratom-v0.6.8/waflib/"
    execute ./waf configure --prefix="${WORKSPACE}" --static --no-shared
    execute ./waf
    execute ./waf install

    build_done "sratom"
  fi

  if build "lilv"; then
    download "https://gitlab.com/lv2/lilv/-/archive/v0.24.12/lilv-v0.24.12.tar.gz" "lilv-v0.24.12.tar.gz"
    execute cp -r "${PACKAGES}"/autowaf/* "${PACKAGES}/lilv-v0.24.12/waflib/"
    execute ./waf configure --prefix="${WORKSPACE}" --static --no-shared --no-utils
    execute ./waf
    execute ./waf install
    CFLAGS+=" -I$WORKSPACE/include/lilv-0"
    build_done "lilv"
  fi

  CONFIGURE_OPTIONS+=("--enable-lv2")
fi

if build "yasm"; then
  download "https://github.com/yasm/yasm/releases/download/v1.3.0/yasm-1.3.0.tar.gz"
  execute ./configure --prefix="${WORKSPACE}"
  execute make -j $MJOBS
  execute make install
  build_done "yasm"
fi

if build "nasm"; then
  #download "https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.xz"
  download "https://mirrors.edge.kernel.org/ubuntu/pool/universe/n/nasm/nasm_2.15.05.orig.tar.xz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make all -j $MJOBS
  execute make install
  build_done "nasm"
fi

if build "zlib"; then
  download "https://www.zlib.net/zlib-1.2.11.tar.gz"
  execute ./configure --static --prefix="${WORKSPACE}"
  execute make -j $MJOBS
  execute make install
  LDFLAGS+=" -L/zlib/lib"
  build_done "zlib"
fi

if $NONFREE_AND_GPL; then
  if build "openssl"; then
    download "https://www.openssl.org/source/openssl-1.1.1l.tar.gz"
    if $MACOS_M1; then
      execute ./configure --prefix="${WORKSPACE}" no-shared no-asm darwin64-arm64-cc
    else
      execute ./config --prefix="${WORKSPACE}" --openssldir="${WORKSPACE}" --with-zlib-include="${WORKSPACE}"/include/ --with-zlib-lib="${WORKSPACE}"/lib no-shared zlib
    fi
    execute make -j $MJOBS
    execute make install_sw
    build_done "openssl"
  fi
  CONFIGURE_OPTIONS+=("--enable-openssl")
fi

if build "cmake"; then
  download "https://cmake.org/files/LatestRelease/cmake-3.21.0.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --parallel="${MJOBS}" -- -DCMAKE_USE_OPENSSL=OFF
  execute make -j $MJOBS
  execute make install
  build_done "cmake"
fi

if build "ninja"; then
  download "https://github.com/ninja-build/ninja/archive/refs/tags/v1.10.2.tar.gz" "ninja-1.10.2.tar.gz"
  execute cmake -Bbuild-cmake -H.
  execute cmake --build build-cmake
  execute cmake --install ./build-cmake/
  build_done "ninja"
fi

if command_exists "python3"; then
  if build "meson"; then
    download "https://files.pythonhosted.org/packages/dd/01/3dba211a922c371044baa3ade48f3021e9b67e83c07b397f8eeeea99d3a6/meson-0.59.1.tar.gz"
    if [[ "$OSTYPE" == "darwin"* ]]; then
      execute ln -s ${PACKAGES}/meson-0.59.1/meson.py /usr/local/bin/meson
      execute chmod +x /usr/local/bin/meson
    else
      execute cp -s ${PACKAGES}/meson-0.59.1/meson.py /usr/local/bin/meson
      execute chmod +x /usr/local/bin/meson
    fi
    build_done "meson"
  fi
fi

if ! $MACOS_M1; then
  if build "svtav1"; then
    download "https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/master/SVT-AV1-master.tar.gz"
    execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DENABLE_SHARED=off -DBUILD_SHARED_LIBS=OFF ../.. -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
    execute make -j $MJOBS
    execute make install
    execute cp SvtAv1Enc.pc "${WORKSPACE}/lib/pkgconfig/"
    execute cp SvtAv1Dec.pc "${WORKSPACE}/lib/pkgconfig/"
    build_done "svtav1"
  fi
  CONFIGURE_OPTIONS+=("--enable-libsvtav1")
fi

if $NONFREE_AND_GPL; then

  if build "x264"; then
    download "https://code.videolan.org/videolan/x264/-/archive/b684ebe04a6f80f8207a57940a1fa00e25274f81/x264-b684ebe04a6f80f8207a57940a1fa00e25274f81.tar.gz" "x264-b684eb.tar.gz"

    if [[ "$OSTYPE" == "linux-gnu" ]]; then
      execute ./configure --prefix="${WORKSPACE}" --enable-static --enable-pic CXXFLAGS="-fPIC"
    else
      execute ./configure --prefix="${WORKSPACE}" --enable-static --enable-pic
    fi

    execute make -j $MJOBS
    execute make install
    execute make install-lib-static

    build_done "x264"
  fi
  CONFIGURE_OPTIONS+=("--enable-libx264")
fi

if $NONFREE_AND_GPL; then
  if build "x265"; then
    download "https://github.com/videolan/x265/archive/Release_3.5.tar.gz" "x265-3.5.tar.gz"

    execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DHIGH_BIT_DEPTH=ON -DENABLE_SHARED=off -DBUILD_SHARED_LIBS=OFF ../../source
    execute make -j $MJOBS
    execute make install

    build_done "x265"
  fi
  CONFIGURE_OPTIONS+=("--enable-libx265")
fi

if build "libvpx"; then
  download "https://github.com/webmproject/libvpx/archive/refs/tags/v1.10.0.tar.gz" "libvpx-1.10.0.tar.gz"

  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "Applying Darwin patch"
  fi

  execute ./configure --prefix="${WORKSPACE}" --disable-unit-tests --disable-shared --as=yasm --enable-vp9-highbitdepth
  execute make -j $MJOBS
  execute make install

  build_done "libvpx"
fi
CONFIGURE_OPTIONS+=("--enable-libvpx")

if command_exists "python3"; then
  if build "libdav1d"; then
    download "https://code.videolan.org/videolan/dav1d/-/archive/0.9.1/dav1d-0.9.1.tar.gz"

    execute mkdir build
    execute meson .. --prefix="${WORKSPACE}" --default-library=static --libdir="${WORKSPACE}/lib"
    execute ninja
    execute meson install

    build_done "libdav1d"
  fi
  CONFIGURE_OPTIONS+=("--enable-libdav1d")
fi

if $NONFREE_AND_GPL; then
  if build "xvidcore"; then
    download "https://downloads.xvid.com/downloads/xvidcore-1.3.7.tar.gz"
    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j $MJOBS
    execute make install

    if [[ -f ${WORKSPACE}/lib/libxvidcore.4.dylib ]]; then
      execute rm "${WORKSPACE}/lib/libxvidcore.4.dylib"
    fi

    if [[ -f ${WORKSPACE}/lib/libxvidcore.so ]]; then
      execute rm "${WORKSPACE}"/lib/libxvidcore.so*
    fi

    build_done "xvidcore"
  fi
  CONFIGURE_OPTIONS+=("--enable-libxvid")
fi

if $NONFREE_AND_GPL; then
  if build "vid_stab"; then
    download "https://github.com/georgmartius/vid.stab/archive/v1.1.0.tar.gz" "vid.stab-1.1.0.tar.gz"

    execute cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DUSE_OMP=OFF -DENABLE_SHARED=off .
    execute make
    execute make install

    build_done "vid_stab"
  fi
  CONFIGURE_OPTIONS+=("--enable-libvidstab")
fi

if build "av1"; then
  download "https://aomedia.googlesource.com/aom/+archive/c0f14141bd71414b004dccd66d48b27570299fa3.tar.gz" "av1.tar.gz" "av1"
  if $MACOS_M1; then
    execute cmake -DENABLE_TESTS=0 -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCONFIG_RUNTIME_CPU_DETECT=0 "$PACKAGES"/av1
  else
    execute cmake -DENABLE_TESTS=0 -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib "$PACKAGES"/av1
  fi
  execute make -j $MJOBS
  execute make install

  build_done "av1"
fi
CONFIGURE_OPTIONS+=("--enable-libaom")

##
## audio library
##

if build "opencore"; then
  download "https://deac-riga.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.5.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install

  build_done "opencore"
fi
CONFIGURE_OPTIONS+=("--enable-libopencore_amrnb" "--enable-libopencore_amrwb")

if build "lame"; then
  download "https://netcologne.dl.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install

  build_done "lame"
fi
CONFIGURE_OPTIONS+=("--enable-libmp3lame")

if build "opus"; then
  download "https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install

  build_done "opus"
fi
CONFIGURE_OPTIONS+=("--enable-libopus")

if build "libogg"; then
  download "https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-1.3.3.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install
  build_done "libogg"
fi

if build "libvorbis"; then
  download "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.6.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --with-ogg-libraries="${WORKSPACE}"/lib --with-ogg-includes="${WORKSPACE}"/include/ --enable-static --disable-shared --disable-oggtest
  execute make -j $MJOBS
  execute make install

  build_done "libvorbis"
fi
CONFIGURE_OPTIONS+=("--enable-libvorbis")

if build "libtheora"; then
  download "https://ftp.osuosl.org/pub/xiph/releases/theora/libtheora-1.1.1.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --with-ogg-libraries="${WORKSPACE}"/lib --with-ogg-includes="${WORKSPACE}"/include/ --with-vorbis-libraries="${WORKSPACE}"/lib --with-vorbis-includes="${WORKSPACE}"/include/ --enable-static --disable-shared --disable-oggtest --disable-vorbistest --disable-examples --disable-asm --disable-spec
  execute make -j $MJOBS
  execute make install

  build_done "libtheora"
fi
CONFIGURE_OPTIONS+=("--enable-libtheora")

if $NONFREE_AND_GPL; then
  if build "fdk_aac"; then
    download "https://sourceforge.net/projects/opencore-amr/files/fdk-aac/fdk-aac-2.0.2.tar.gz/download?use_mirror=gigenet" "fdk-aac-2.0.2.tar.gz"
    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --enable-pic
    execute make -j $MJOBS
    execute make install

    build_done "fdk_aac"
  fi
  CONFIGURE_OPTIONS+=("--enable-libfdk-aac")
fi

##
## image library
##

if build "libtiff"; then
  download "https://download.osgeo.org/libtiff/tiff-4.3.0.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install
  build_done "libtiff"
fi

if build "libpng"; then
  download "https://deac-riga.dl.sourceforge.net/project/libpng/libpng16/1.6.37/libpng-1.6.37.tar.gz"
  export LDFLAGS="${LDFLAGS}"
  export CPPFLAGS="${CFLAGS}"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install
  build_done "libpng"
fi

if build "libwebp"; then
  download "https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.0.tar.gz" "libwebp-1.2.0.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON ../
  execute make -j $MJOBS
  execute make install

  build_done "libwebp"
fi
CONFIGURE_OPTIONS+=("--enable-libwebp")

##
## other library
##

if build "libsdl"; then
  download "https://www.libsdl.org/release/SDL2-2.0.14.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install

  build_done "libsdl"
fi

if $NONFREE_AND_GPL; then
  if build "srt"; then
    download "https://github.com/Haivision/srt/archive/v1.4.3.tar.gz" "srt-1.4.3.tar.gz"
    export OPENSSL_ROOT_DIR="${WORKSPACE}"
    export OPENSSL_LIB_DIR="${WORKSPACE}"/lib
    export OPENSSL_INCLUDE_DIR="${WORKSPACE}"/include/
    execute cmake . -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON -DENABLE_APPS=OFF -DUSE_STATIC_LIBSTDCXX=ON
    execute make install

    build_done "srt"
  fi
  CONFIGURE_OPTIONS+=("--enable-libsrt")
fi

##
## HWaccel library
##

if [[ "$OSTYPE" == "linux-gnu" ]]; then
  if command_exists "nvcc"; then
    if build "nv-codec"; then
      download "https://github.com/FFmpeg/nv-codec-headers/releases/download/n11.0.10.1/nv-codec-headers-11.0.10.1.tar.gz"
      execute make PREFIX="${WORKSPACE}"
      execute make install PREFIX="${WORKSPACE}"
      build_done "nv-codec"
    fi
    CFLAGS+=" -I/usr/local/cuda/include"
    LDFLAGS+=" -L/usr/local/cuda/lib64"
    CONFIGURE_OPTIONS+=("--enable-cuda-nvcc" "--enable-cuvid" "--enable-nvenc" "--enable-cuda-llvm")

    if [ -z "$LDEXEFLAGS" ]; then
      CONFIGURE_OPTIONS+=("--enable-libnpp") # Only libnpp cannot be statically linked.
    fi

    # https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
    CONFIGURE_OPTIONS+=("--nvccflags=-gencode arch=compute_52,code=sm_52")
  fi

  # Vaapi doesn't work well with static links FFmpeg.
  if [ -z "$LDEXEFLAGS" ]; then
    # If the libva development SDK is installed, enable vaapi.
    if lib_exists "libva.so.2"; then
      if build "vaapi"; then
        build_done "vaapi"
      fi
      CONFIGURE_OPTIONS+=("--enable-vaapi")
    fi
    if lib_exists "libvdpau.so.1"; then
      if build "vdpau"; then
        build_done "vdpau";
      fi
      CONFIGURE_OPTIONS+=("--enable-vdpau")
    fi
  fi
fi

##
## FFmpeg
##

build "ffmpeg"
download "https://github.com/FFmpeg/FFmpeg/archive/refs/heads/release/4.4.tar.gz" "FFmpeg-release-4.4.tar.gz"

echo ""
echo "FFmpeg Building Configure Options:"
echo '"${CONFIGURE_OPTIONS[@]}" --disable-debug --disable-doc --disable-shared --enable-pthreads --enable-static --enable-small --enable-version3 --extra-cflags="${CFLAGS}" --extra-ldexeflags="${LDEXEFLAGS}" --extra-ldflags="${LDFLAGS}" --extra-libs="${EXTRALIBS}" --pkgconfigdir="$WORKSPACE/lib/pkgconfig" --pkg-config-flags="--static" --prefix="${WORKSPACE}"'
echo ""

# shellcheck disable=SC2086
execute ./configure "${CONFIGURE_OPTIONS[@]}" --disable-debug --disable-doc --disable-shared --enable-pthreads --enable-static --enable-small --enable-version3 --extra-cflags="${CFLAGS}" --extra-ldexeflags="${LDEXEFLAGS}" --extra-ldflags="${LDFLAGS}" --extra-libs="${EXTRALIBS}" --pkgconfigdir="$WORKSPACE/lib/pkgconfig" --pkg-config-flags="--static" --prefix="${WORKSPACE}"

execute make -j $MJOBS
execute make install

echo ""
echo "Testing done. No change occurred."
echo "To build, use ./build-ffmpeg."
echo ""

exit 0
